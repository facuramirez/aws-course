# Defines tu flujo de CI/CD para el code-pipeline
# Paso 1: Debes versionar el flujo de CI/CD deploy.
version: 0.2
# Definimos las etapas del flujo de CI/CD
# en otras herramientas se llaman stages
phases:
  # Especificar la imagen de node que vamos a ocupar para trabajar en el flujo de CI/CD
  install:
    runtime-versions:
      nodejs: 18
  pre_build:
    commands:
      - echo Logging into AWS ECR
      # Ocupar el cli de aws para autenticarme con la nube y así poder utilizar el servicio de ecr que es donde quiero publicar la imagen de mi app
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 453486992147.dkr.ecr.us-east-1.amazonaws.com/my-image-course-aws
  build:
    commands:
      - echo Building image Docker
      # Acá construimos nuestra imagen
      # -f: Permite tomar la definición de un docker-compose pero con otro nombre
      #- docker-compose -f compose-prd.yaml build
      - docker-compose -f compose-prd.yaml build
  post_build:
    commands:
      # Acá publicamos la imagen generada
      - docker-compose -f compose-prd.yaml push
artifacts:
  # Este es el objeto de salida como representación a su ejecución de cara al Elastic Beanstalk
  files:
    - 'Dockerrun.aws.json'
