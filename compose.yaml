version: '3.8'

services:
  mysql-server:
    image: mysql:8
    container_name: mysql-server
    environment:
      #MYSQL_ROOT_PASSWORD: 12345 # contraseña del usuario root master solicitado para el acceso a interacciones con la bdd
      #MYSQL_DATABASE: db
      #MYSQL_USER: mchamorro
      #MYSQL_PASSWORD: 12345
      - .env
    restart: unless-stopped
    ports: 
      - 3310:3306
    networks:
      - net-app
    volumes:
      - vol-app:/var/lib/mysql
    healthcheck:
      test: ["CMD", 'mysqladmin', 'ping', '-h', 'localhost'] # Usa mysqladmin ping para verificar si MySQL está activo.
      interval: 10s # Verifica cada 10 segundos.
      timeout: 10s # Máximo de espera por intento.
      retries: 3 #  Si falla 3 veces, se considera inactivo.
      start_interval: 5s # Espera 5s antes de la primera verificación.

  mysql-client:
    image: phpmyadmin
    container_name: mysql-client
    environment:
      PMA_ARBITRARY: 1 # Permite conexiones arbitrarias a MySQL desde la interfaz de phpMyAdmin.
    restart: unless-stopped
    ports: 
      - 8080:80
    networks:
      - net-app
    healthcheck:
      # El parámetro -f (abreviatura de --fail) indica que curl debe fallar si la respuesta HTTP tiene un código de estado 4xx o 5xx (errores del cliente o del servidor).
      # Si el servidor devuelve un código de estado de éxito (por ejemplo, 200 OK), curl no hará nada y el comando se considerará exitoso.
      test: ["CMD", "curl", "-f", "http://localhost"] # Usa curl para verificar que phpMyAdmin responde en http://localhost.
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 5s
    depends_on:
      mysql-server: # No inicia hasta que mysql-server esté saludable. Si no tuviera condition healty, simplemente dispara primera el servicio dependiente pero nada más
        condition: service_healthy

  mongo-server:
    image: mongo:4
    container_name: mongo-server
    restart: unless-stopped
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 12345
      MONGO_INITDB_DATABASE: db
    volumes:
      - vol-app-mongo:/data/db
    networks:
      - net-app
    healthcheck:
      test: [
        "CMD", 
        "mongo", 
        "--quiet", 
        "127.0.0.1/test", 
        '--eval', # Usa mongo --eval para hacer un ping a la base de datos.
        "'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'" # Si la respuesta es 0, MongoDB está saludable.
      ]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 5s

  mongo-client:
    image: mongo-express:1.0.0-18-alpine3.18
    container_name: mongo-client
    restart: unless-stopped
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: 12345
      ME_CONFIG_BASICAUTH_USERNAME: root
      ME_CONFIG_BASICAUTH_PASSWORD: 12345
      ME_CONFIG_MONGODB_SERVER: mongo-server
      ME_CONFIG_MONGODB_PORT: 27017
    networks:
      - net-app
    depends_on:
      mongo-server:
        condition: service_healthy
  
  arq-hex-app:
    build:
      context: . # hace referencia a la raíz donde va a ir a buscar el Dockerfile
      dockerfile: Dockerfile
    image: mi-nest-app:v1.0
    container_name: app-nest
    restart: unless-stopped
    ports:
      - 3000:3000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/v1/health"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_interval: 5s
    networks:
      - net-app
    depends_on:
      mongo-server:
        condition: service_healthy
      mysql-server:
        condition: service_healthy

networks:
  net-app:
    driver: bridge
    name: net-app

volumes:
  vol-app:
    name: vol-app
  vol-app-mongo:
    name: vol-app-mongo
   